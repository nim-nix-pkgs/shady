#version 430
layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
// from commandsToImage

float[127] hits;
uniform samplerBuffer inputCommandBuffer;
int ip = 0;
int hitCount = 0;
uniform ivec4 dimensions;
writeonly uniform uimageBuffer outputImageBuffer;
vec4[899] colorBuffer;
float[899] alphas;
int[127] hitsWinding;

uint readInt();
void commandsInner(float scanY, vec2 aa);
float readFloat();
void writeColor(vec2 pos, vec4 color);
vec4 blendNormal(vec4 backdrop, vec4 source);


uint readInt(
) {
  uint result;
  result = uint(texelFetch(inputCommandBuffer, ip).x);
  ip += 1;
  return result;
}

void commandsInner(
  float scanY,
  vec2 aa
) {
  ip = int(0);
  hitCount = int(0);
  while(true) {
    uint opcode = readInt();
    if (opcode == uint(0)) {
      break;
    } else if (opcode == uint(1)) {
      int number = int(readFloat());
      int minX = int(readFloat());
      int maxX = int(readFloat());
      int ipStart = ip;
      int numAA = 5;
      for(int x = minX; x < maxX; x++) {
        alphas[x] = 0.0;;
      }
      for(int aaLine = 0; aaLine < numAA; aaLine++) {
        float yAAOffset = (float(float(aaLine)) + 0.5) / (float(float(numAA)));
        ip = ipStart;
        for(int i = 0; i < number; i++) {
          vec2 at = vec2(readFloat(), float(float(readFloat()) + yAAOffset));
          vec2 to = vec2(readFloat(), float(float(readFloat()) + yAAOffset));
          float winding = readFloat();
          float m = (at.y - to.y) / (at.x - to.x);
          float b = at.y - m * at.x;
          if ((scanY <= at.y) || (to.y < scanY)) {
            ;
          } else {
            float x = 0.0;
            if (float(abs(at.x - to.x)) < 0.0003141592653589793) {
              x = at.x;
            } else {
              x = (scanY - b) / (m);
            }
            hits[hitCount] = x;
            hitsWinding[hitCount] = int(winding);
            hitCount += 1;
            int i = hitCount - int(1);
            while(! (i == int(0))) {
              if (hits[i] < hits[i - int(1)]) {
                float tmp = hits[i - int(1)];
                hits[i - int(1)] = hits[i];
                hits[i] = tmp;
                int tmpWinding = hitsWinding[i - int(1)];
                hitsWinding[i - int(1)] = hitsWinding[i];
                hitsWinding[i] = tmpWinding;
                i -= 1;
              } else {
                break;
              }
            }
          }
        }
        if (int(0) < hitCount) {
          int atHit = 0;
          while(atHit < int(hitCount)) {
            int pen = hitsWinding[atHit];
            float xAt = hits[atHit];
            float xTo = 0.0;
            atHit += 1;
            while(true) {
              pen += hitsWinding[atHit];
              xTo = hits[atHit];
              atHit += 1;
              if (pen == int(0)) {
                break;
              }
              if (int(hitCount) <= atHit) {
                break;
              }
            }
            if (int(floor(xAt)) == int(floor(xTo))) {
              alphas[int(floor(xAt))] += xTo - xAt;
            } else {
              alphas[int(floor(xAt))] += ceil(xAt) - xAt;
              alphas[int(floor(xTo))] += xTo - floor(xTo);
            }
            for(int x = int(xAt + 1.0); x < int(xTo); x++) {
              alphas[x] += 1.0;;
            }
          }
          hitCount = int(0);
        }
      }
      vec4 fillColor = vec4(readFloat(), readFloat(), readFloat(), readFloat());
      for(int x = minX; x < maxX; x++) {
        colorBuffer[x] = blendNormal(colorBuffer[x], fillColor * alphas[x] / float(numAA));;
      }
    } else if (opcode == uint(3)) {
      float yMin = readFloat() + aa.y;
      float yMax = readFloat() + aa.y;
      float label = readFloat();
      if ((scanY < yMin) || (yMax <= scanY)) {
        ip = int(label);
      }
    }
  }
}

float readFloat(
) {
  float result;
  result = texelFetch(inputCommandBuffer, ip).x;
  ip += 1;
  return result;
}

void writeColor(
  vec2 pos,
  vec4 color
) {
  imageStore(outputImageBuffer, int(uint(pos.y) * uint(dimensions.x) + uint(pos.x)), uvec4(color * 255.0));
}

vec4 blendNormal(
  vec4 backdrop,
  vec4 source
) {
  vec4 result;
  result = source + (backdrop) * (1.0 - source.w);
  return result;
}

void main() {
  uvec3 pos = gl_GlobalInvocationID;
  for(int x = int(0); x < dimensions.x; x++) {
    colorBuffer[x] = vec4(0.0, 0.0, 0.0, 0.0);;
  }
  commandsInner(float(pos.y), vec2(0.0, 0.5));
  for(int x = int(0); x < dimensions.x; x++) {
  writeColor(vec2(float(x), float(pos.y)), colorBuffer[x]);
  }
}
